@model ChamadoViewModel
@{
    bool isInsert = string.IsNullOrEmpty(ViewBag.Operacao) || ViewBag.Operacao == "I";
    ViewBag.Title = isInsert ? "Abertura de Chamado" : "Alterar Chamado";
    string operacao = isInsert ? "I" : "A";
}
<h2>@ViewBag.Title</h2>
@* Utilizando o Helper do MVC para criar o formulário *@
@using (Html.BeginForm("Salvar", "Chamado", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-md-8">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <input type="hidden" name="operacao" value="@operacao" />

        <div class="form-group">
            @Html.LabelFor(model => model.Id, "ID do Chamado", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataAbertura, "Data de Abertura", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.DataAbertura, new { htmlAttributes = new { @class = "form-control", @type = "date", max = ViewBag.Hoje } })
                @Html.ValidationMessageFor(model => model.DataAbertura, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DescricaoProblema, "Descrição do Problema", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.DescricaoProblema, new { @class = "form-control", @rows = 4 })
                @Html.ValidationMessageFor(model => model.DescricaoProblema, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Situacao, "Situação", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @* Dropdown para a situação, que é mais intuitivo *@
                @Html.DropDownListFor(model => model.Situacao, new SelectList(
                new[] {
                        new { Value = "1", Text = "Pendente" },
                        new { Value = "2", Text = "Atendido" },
                        }, "Value", "Text"), "Selecione a Situação",
                        new { @class = "form-control", id = "situacaoDropdown" }
                        )
            @Html.ValidationMessageFor(model => model.Situacao, "", new { @class = "text-danger" })
        </div>
    </div>

    @* Estes campos só aparecerão se a situação for "Atendido" *@
    <div id="camposAtendimento" style="display: none;">
        <hr />
        <h4>Dados do Atendimento</h4>

        <div class="form-group">
            @Html.LabelFor(model => model.DataAtendimento, "Data do Atendimento", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.DataAtendimento, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.DataAtendimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DescricaoAtendimento, "Descrição do Atendimento", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.DescricaoAtendimento, new { @class = "form-control", @rows = 4 })
                @Html.ValidationMessageFor(model => model.DescricaoAtendimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UsuarioId, "Usuário Responsável", new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @* Cria um DropDownList usando a lista de usuários que veio do Controller *@
                @Html.DropDownListFor(
                                model => model.UsuarioId,
                                new SelectList(ViewBag.Usuarios, "Id", "Nome"),
                                "Selecione um usuário",  // Texto inicial da combo
                                new { @class = "form-control" }
                                )
                @Html.ValidationMessageFor(model => model.UsuarioId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-3 col-md-9">
            <input type="submit" value="Salvar" class="btn btn-success" />
            <a href="/chamado/index" class="btn btn-default">Cancelar</a>
        </div>
    </div>
</div>
}


@* Script para mostrar/ocultar os campos de atendimento *@
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const situacaoDropdown = document.getElementById('situacaoDropdown');
        const camposAtendimento = document.getElementById('camposAtendimento');

        function toggleAtendimentoFields() {
            // Se o valor for '2' (Atendido), mostra os campos. Senão, oculta.
            if (situacaoDropdown.value === '2') {
                camposAtendimento.style.display = 'block';
            } else {
                camposAtendimento.style.display = 'none';
            }
        }

        // Executa a função quando a página carrega
        toggleAtendimentoFields();

        // Executa a função toda vez que o valor do dropdown mudar
        situacaoDropdown.addEventListener('change', toggleAtendimentoFields);
    });
</script>